Output Formatting
    reprlib module : a version of repr() customized for abbreviated displays of large or deeply nested containers.

    ex)
        >>> import reprlib
        >>> reprlib.repr(set('supercalifragilisticexpialidocious'))
        "{'a', 'c', 'd', 'e', 'f', 'g', ...}"

    pprint module : control over printing both built-in and user defined objects in a way that is readable by the interpreter.
        adds line breaks and indentation to more clear data structure for longer result.

    ex)
        >>> import pprint
        >>> t = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta',
        ...     'yellow'], 'blue']]]
        ...
        >>> pprint.pprint(t, width=30)
        [[[['black', 'cyan'],
        'white',
        ['green', 'red']],
        [['magenta', 'yellow'],
        'blue']]]

    textwrap module : formats paragraphs of text to fit a given screen width.
    
    ex)
        >>> import textwrap
        >>> doc = """The wrap() method is just like fill() except that it returns
        ... a list of strings instead of one big string with newlines to separate
        ... the wrapped lines."""
        ...
        >>> print(textwrap.fill(doc, width=40))
        The wrap() method is just like fill()
        except that it returns a list of strings
        instead of one big string with newlines
        to separate the wrapped lines.

    locale module : accesses a database of culture specific data formats.
        grouping attributes of locale's format function : formatting numbers with group separators.

    ex)
        >>> import locale
        >>> locale.setlocale(locale.LC_ALL, 'English_United States.1252')
        'English_United States.1252'
        >>> conv = locale.localeconv()          # get a mapping of conventions
        >>> x = 1234567.8
        >>> locale.format("%d", x, grouping=True)
        '1,234,567'
        >>> locale.format_string("%s%.*f", (conv['currency_symbol'],
        ...                      conv['frac_digits'], x), grouping=True)
        '$1,234,567.80'

Templating
    string module : Having Template class ith a simplified syntax suitable for editing by end-users.
    Users can customize applications without having alter the application.

    The format uses placeholder names formed by $ with valid Python identifiers (alphanumeric characters and underscores).
    Using {} to allow more alphanumeric letters with no intervening spaces.
    Writing $$ creates a single escaped $.

    ex)
        >>> from string import Template
        >>> t = Template('${village}folk send $$10 to $cause.')
        >>> t.substitute(village='Nottingham', cause='the ditch fund')
        'Nottinghamfolk send $10 to the ditch fund.'

    substitute() method : raises a KeyError when a placeholder is not supplied in a dictionary or a keyword argument.

    safe_substitute() method : leave placeholders unchanged if data is missing

    ex)
        >>> t = Template('Return the $item to $owner.')
        >>> d = dict(item='unladen swallow')
        >>> t.substitute(d)
        Traceback (most recent call last):
        ...
        KeyError: 'owner'
        >>> t.safe_substitute(d)
        'Return the unladen swallow to $owner.'

    Template subclasses can specify a custom delimiter.


    ex)
        >>> import time, os.path
        >>> photofiles = ['img_1074.jpg', 'img_1076.jpg', 'img_1077.jpg']
        >>> class BatchRename(Template):
        ...     delimiter = '%'
        >>> fmt = input('Enter rename style (%d-date %n-seqnum %f-format):  ')
        Enter rename style (%d-date %n-seqnum %f-format):  Ashley_%n%f

        >>> t = BatchRename(fmt)
        >>> date = time.strftime('%d%b%y')
        >>> for i, filename in enumerate(photofiles):
        ...     base, ext = os.path.splitext(filename)
        ...     newname = t.substitute(d=date, n=i, f=ext)
        ...     print('{0} --> {1}'.format(filename, newname))

        img_1074.jpg --> Ashley_0.jpg
        img_1076.jpg --> Ashley_1.jpg
        img_1077.jpg --> Ashley_2.jpg

        # For example, a batch renaming utility for a photo browser may elect to use percent signs for placeholders such as the current date, image sequence number, or file format:

    Another application for templating is separating program logic from the details of multiple output formats. 
    This makes it possible to substitute custom templates for XML files, plain text reports, and HTML web reports.

Binary Data Record Layouts
    Struct module : pack() and unpack() functions - working with variable length binary record formats.


    ex)
        # how to loop through header information in a ZIP file without using the zipfile module.
        # Pack codes "H" and "I" represent 2 and 4 byte unsigned numbers respectively.
        # The "<" indicates that they are standard size and in little-endian byte order.
        import struct

        with open('myfile.zip', 'rb') as f:
            data = f.read()

        start = 0
        for i in range(3):                      # show the first 3 file headers
            start += 14
            fields = struct.unpack('<IIIHH', data[start:start+16])
            crc32, comp_size, uncomp_size, filenamesize, extra_size = fields

            start += 16
            filename = data[start:start+filenamesize]
            start += filenamesize
            extra = data[start:start+extra_size]
            print(filename, hex(crc32), comp_size, uncomp_size)

            start += extra_size + comp_size     # skip to the next header

Multi-Threading
    Threading :  a technique for decoupling tasks which are not sequentially dependent.
    Used to improve the responsiveness of applications that accept user input while other tasks run in the background.
        ex) running I/O in parallel with computations in another thread.

    ex)
        # high level threading module : run tasks in background while the main program continues to run.
        
        import threading, zipfile

        class AsyncZip(threading.Thread):
            def __init__(self, infile, outfile):
                threading.Thread.__init__(self)
                self.infile = infile
                self.outfile = outfile

            def run(self):
                f = zipfile.ZipFile(self.outfile, 'w', zipfile.ZIP_DEFLATED)
                f.write(self.infile)
                f.close()
                print('Finished background zip of:', self.infile)

        background = AsyncZip('mydata.txt', 'myarchive.zip')
        background.start()
        print('The main program continues to run in foreground.')

        background.join()    # Wait for the background task to finish
        print('Main program waited until background was done.')

    Challenge : coordinating threads that share data or other resources.

    To overcome it, the threading module provides a number of synchronization primitives including locks, events, condition variables, and semaphores.
    These tools are powerful but may have problems from minor design errors.

    Prefered approach : concentrate all access to a resource in a single thread
                        and use the queue module to feed that thread with requests from other threads.

    Queue objects for inter-thread communication and coordination are easier to design, more readable, and more reliable.
































