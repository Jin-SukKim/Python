Brief Tour of the Standard Library

Operating System Interface
    The os module provides dozens of functions for interacting with the operating system:

    ex)
        >>> import os
        >>> os.getcwd()      # Return the current working directory
        'C:\\Python39'
        >>> os.chdir('/server/accesslogs')   # Change current working directory
        >>> os.system('mkdir today')   # Run the command mkdir in the system shell
        0

    import os should be used instead of from os import *.
        ㄴ it will keep os.open() from shadowing the built-in open() function which operates much differently.

    The built-in dir() and help() functions are useful as interactive aids for working with large modules like os.

    ex)
        >>> import os
        >>> dir(os)
        <returns a list of all module functions>
        >>> help(os)
        <returns an extensive manual page created from the module's docstrings>

    shutil module : provide high level interface for daily file and directory management tasks.

    ex)
        >>> import shutil
        >>> shutil.copyfile('data.db', 'archive.db')
        'archive.db'
        >>> shutil.move('/build/executables', 'installdir')
        'installdir'

File Wildcards
    glob module : providing a function for making file lists from directory wildcard searches.

    ex)
        >>> import glob
        >>> glob.glob('*.py')
        ['primes.py', 'random.py', 'quote.py']

Command Line Arguments

    the sys module’s argv attribute as a list : Common utility scripts often need to process command line arguments.

    results from running python demo.py one two three at the command line:
    ex)
        >>> import sys
        >>> print(sys.argv)
        ['demo.py', 'one', 'two', 'three']

    argparse module : provides mechanism to process command line arguments.

    ex)
        # extracts one or more filenames and an optional number of lines to be displayed.
        import argparse

        parser = argparse.ArgumentParser(prog = 'top',
            description = 'Show top lines from each file')
        parser.add_argument('filenames', nargs='+')
        parser.add_argument('-l', '--lines', type=int, default=10)
        args = parser.parse_args()
        print(args)

    When run at the command line with python top.py --lines=5 alpha.txt beta.txt, 
    the script sets args.lines to 5 and args.filenames to ['alpha.txt', 'beta.txt'].

Error Output Redirection and Program Termination
    std module : contain attributes for stdin, stdout, and stderr.

    ex)
        >>> sys.stderr.write('Warning, log file not found starting a new one\n')
        Warning, log file not found starting a new one

    direct way to terminate a script : sys.exit()

String Pattern Matching
    re module : provides regular expression tools for advanced string processing.
    For complex matching and manipulation, regular expressions offer succinct, optimized solutions:

    ex)
        >>> import re
        >>> re.findall(r'\bf[a-z]*', 'which foot or hand fell fastest')
        ['foot', 'fell', 'fastest']
        >>> re.sub(r'(\b[a-z]+) \1', r'\1', 'cat in the the hat')
        'cat in the hat'

    only simple capabilities are needed
    string is preferred b/c easier to read and debug
    ex)
        >>> 'tea for too'.replace('too', 'two')
        'tea for two'

Mathematics
    math module : gives access to the underlying C library functions for floating point math.
        
        ex)
            >>> import math
            >>> math.cos(math.pi / 4)
            0.70710678118654757
            >>> math.log(1024, 2)
            10.0

    random module : random selections

        ex)
            >>> import random
            >>> random.choice(['apple', 'pear', 'banana'])
            'apple'
            >>> random.sample(range(100), 10)   # sampling without replacement
            [30, 83, 16, 4, 8, 81, 41, 50, 18, 33]
            >>> random.random()    # random float
            0.17970987693706186
            >>> random.randrange(6)    # random integer chosen from range(6)
            4

    statistic module : calculates basic statistical properties (the mean, median, variance, etc.) of numeric data

        ex)
            >>> import statistics
            >>> data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]
            >>> statistics.mean(data)
            1.6071428571428572
            >>> statistics.median(data)
            1.25
            >>> statistics.variance(data)
            1.3720238095238095










