Internet Access
    There are many modules for accessing Internet and processing protocols.
    Two simplest : urllib.request for retrieving data from URLs
                   smtplib : sending mail

    ex)
        >>> from urllib.request import urlopen
        >>> with urlopen('http://tycho.usno.navy.mil/cgi-bin/timer.pl') as response:
        ...     for line in response:
        ...         line = line.decode('utf-8')  # Decoding the binary data to text.
        ...         if 'EST' in line or 'EDT' in line:  # look for Eastern Time
        ...             print(line)

        <BR>Nov. 25, 09:43:32 PM EST

        >>> import smtplib
        >>> server = smtplib.SMTP('localhost')
        >>> server.sendmail('soothsayer@example.org', 'jcaesar@example.org',
        ... """To: jcaesar@example.org
        ... From: soothsayer@example.org
        ...
        ... Beware the Ides of March.
        ... """)
        >>> server.quit()

        # the second example needs a mailserver running on localhost

Dates and Times
    datetime module : simple and complex way to control dates and times classes.
    date and time arithmetic supported.
    classes are focused on output formatting and manipulation.
    time zone is supported.

    ex)
        >>> # dates are easily constructed and formatted
        >>> from datetime import date
        >>> now = date.today()
        >>> now
        datetime.date(2003, 12, 2)
        >>> now.strftime("%m-%d-%y. %d %b %Y is a %A on the %d day of %B.")
        '12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'

        >>> # dates support calendar arithmetic
        >>> birthday = date(1964, 7, 31)
        >>> age = now - birthday
        >>> age.days
        14368

Data Compression
    Common data archiving and compression formats.
    supported modules : zlib, gzip, bz2, lzma, zipfile, tarfile.

    ex)
        >>> import zlib
        >>> s = b'witch which has which witches wrist watch'
        >>> len(s)
        41
        >>> t = zlib.compress(s)
        >>> len(t)
        37
        >>> zlib.decompress(t)
        b'witch which has which witches wrist watch'
        >>> zlib.crc32(s)
        226805979

Performance Measurement
    Measurement tool for comparing different methods, and approaches to the same problem.
    Modules : timeit, profile, pstats

    ex)
        >>> from timeit import Timer
        >>> Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()
        0.57535828626024577
        >>> Timer('a,b = b,a', 'a=1; b=2').timeit()
        0.54962537085770791

Quality Control
    Testing functions frequently for developing high quality software
    doctest module : a tool for scanning a module and validating tests embeded in a program's docstring.

    Test construction is as simple as cutting-and-pasting a typical call along with its results into the docstring.
    Providing the user with an example and it allows the doctest module to make sure the code remains true to the documentation.

    ex)
        def average(values):
            """Computes the arithmetic mean of a list of numbers.

            >>> print(average([20, 30, 70]))
            40.0
            """
            return sum(values) / len(values)

        import doctest
        doctest.testmod()   # automatically validate the embedded tests

    unittest module : allows a more comprehensive set of tests to be maintained in a separate file.

    ex)
        import unittest

        class TestStatisticalFunctions(unittest.TestCase):

            def test_average(self):
                self.assertEqual(average([20, 30, 70]), 40.0)
                self.assertEqual(round(average([1, 5, 7]), 1), 4.3)
                with self.assertRaises(ZeroDivisionError):
                    average([])
                with self.assertRaises(TypeError):
                    average(20, 30, 70)

        unittest.main()  # Calling from the command line invokes all tests

Tips :
    Batteries Included

        Python has a “batteries included” philosophy. This is best seen through the sophisticated and robust capabilities of its larger packages. For example:

            The xmlrpc.client and xmlrpc.server modules make implementing remote procedure calls into an almost trivial task. Despite the modules names, no direct knowledge or handling of XML is needed.

            The email package is a library for managing email messages, including MIME and other RFC 2822-based message documents. Unlike smtplib and poplib which actually send and receive messages, the email package has a complete toolset for building or decoding complex message structures (including attachments) and for implementing internet encoding and header protocols.

            The json package provides robust support for parsing this popular data interchange format. The csv module supports direct reading and writing of files in Comma-Separated Value format, commonly supported by databases and spreadsheets. XML processing is supported by the xml.etree.ElementTree, xml.dom and xml.sax packages. Together, these modules and packages greatly simplify data interchange between Python applications and other tools.

            The sqlite3 module is a wrapper for the SQLite database library, providing a persistent database that can be updated and accessed using slightly nonstandard SQL syntax.

            Internationalization is supported by a number of modules including gettext, locale, and the codecs package.

