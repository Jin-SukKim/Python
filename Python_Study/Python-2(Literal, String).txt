Literal
    '' or "" return same value
    special cases : put \ infront (\', \" ect)

    >>> 'sample' # print all.
    'sample'
    >>> '\"sample'
    '\"sample'

    >>> print('First line.\nSecond line.') # print literal easier to read
    First line
    Second line

    # using r(raw string) infront to print all. Not treating like special cases    
    >>> print('C:\some\name')  # here \n means newline!
    C:\some
    ame
    >>> print(r'C:\some\name')  # note the r before the quote
    C:\some\name

    print all lines by using """...""" or '''...'''
    >>> print("""\
        Usage: thingy [OPTIONS]
            -h                        Display this usage message
            -H hostname               Hostname to connect to
        """)
    Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to

    Add literal by using +, repeat by using *
    >>> # 3 times 'un', followed by 'ium'
    >>> 3 * 'un' + 'ium'
    'unununium'

    Automatic add only literals
    >>> 'Py' 'thon' # good for writing long sentence
    'Python'
    
    >>> prefix = 'Py'
    >>> prefix 'thon'  # can't concatenate a variable and a string literal
    File "<stdin>", line 1
        prefix 'thon'
                    ^
    SyntaxError: invalid syntax
    >>> ('un' * 3) 'ium'
    File "<stdin>", line 1
        ('un' * 3) 'ium'
                    ^
    SyntaxError: invalid syntax` # should use +

    # read like array
    >>> word = 'Python'
    >>> word[0]  # character in position 0
    'P'
    >>> word[5]  # character in position 5
    'n'

    # can read by using negative number
    # -0 and 0 are same so start with -1
    >>> word[-1]  # last character
    'n'
    >>> word[-2]  # second-last character
    'o'
    >>> word[-6]
    'P'

    Slicing for get substring
    # word = 'Python'
    >>> word[0:2]  # characters from position 0 (included) to 2 (excluded)
    'Py'
    >>> word[2:5]  # characters from position 2 (included) to 5 (excluded)
    'tho'

    # start position is always included but end position is not always included
    >>> word[:2] + word[2:]
    'Python'
    >>> word[:4] + word[4:]
    'Python'

    >>> word[:2]   # character from the beginning to position 2 (excluded)
    'Py'
    >>> word[4:]   # characters from position 4 (included) to the end
    'on'
    >>> word[-2:]  # characters from the second-last (included) to the end
    'on'

    # Python's literal is constant
    # It cannot be changed
    >>> word[0] = 'J'
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    TypeError: 'str' object does not support item assignment

    # if new literal is needed, should be created

    >>> 'J' + word[1:]
    'Jython'
    >>> word[:2] + 'py'
    'Pypy'

    len(string) is length of the literal
    >>> word = 'Python'
    >>> len(word)
    6

    # in checks word in the string
    >>> 'Py' in 'Python'
    True

Method
    capitalize() 
        : return first letter uppercase and others are lowercase

    casefold() 
        : ignore cases (uppercase and lowercase)

    center(width[,fillchar]) 
        : convert center letter to fillchar

    count(sub[, start[,end]]) 
        : return count of range of [start, end] whici is not repeated with sub

    encode(encoding="utf-8", errors="strcit") 
        : return encoded string
        basic encoding is 'utf-8'
        
        errors for treating other errors
        basic error is 'strict' which occurs UnicodeError when ecoding error happens
        other possible error value
            : 'ignore', 'replace', 'xmlcharrefreplace', 'backslashreplace' and codecs.refister_error() names

    endswith(suffix[, start[, end]])
        : return True, if string end with assigned suffix
          else False
    
    expandtabs(tabsize=8)
        : resize tab space

    find(sub[, start[, end]])
        : sub return index of slice string [start:end] range
          if there is no sub, reutnr -1

    format(*args, **kwrags)
        : return parameters to where '{}' is

    ect