List Del

    remove an item from a list given its index instead of its value

    ex) remove an item in list

        >>> a = [-1, 1, 66.25, 333, 333, 1234.5]
        >>> del a[0]
        >>> a
        [1, 66.25, 333, 333, 1234.5]
        >>> del a[2:4]
        >>> a
        [1, 66.25, 1234.5]
        >>> del a[:]
        >>> a
        []

    ex2) delete entire variables

        >>> del a

List Tuples and Sequences

    Sequence data types : List, Tuples, range

    Standard Sequence Data Type = Tuple

    A tuple consists of a number of values separated by commas
    ex)
        >>> t = 12345, 54321, 'hello!'
        >>> t[0]
        12345
        >>> t
        (12345, 54321, 'hello!')
        >>> # Tuples may be nested:
        ... u = t, (1, 2, 3, 4, 5)
        >>> u
        ((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))
        >>> # Tuples are immutable:
        ... t[0] = 88888
        Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        TypeError: 'tuple' object does not support item assignment
        >>> # but they can contain mutable objects:
        ... v = ([1, 2, 3], [3, 2, 1])
        >>> v
        ([1, 2, 3], [3, 2, 1])

        * output tuples are always enclosed in parentheses
        * Tuples are immutable,

Sequence unpacking
    works for any Sequence on the right-hand side.

    ex)
        >>> x, y, z = t

List Sets
    
    Set objects also support mathematical operations like union, intersection, difference, and symmetric difference.
    Curly braces or the set() function can be used to create sets.
        ã„´ Using set() to create empty set not {}

    ex)
        >>> basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
        >>> print(basket)                      # show that duplicates have been removed
        {'orange', 'banana', 'pear', 'apple'}
        >>> 'orange' in basket                 # fast membership testing
        True
        >>> 'crabgrass' in basket
        False

        >>> # Demonstrate set operations on unique letters from two words
        ...
        >>> a = set('abracadabra')
        >>> b = set('alacazam')
        >>> a                                  # unique letters in a
        {'a', 'r', 'b', 'c', 'd'}
        >>> a - b                              # letters in a but not in b
        {'r', 'd', 'b'}
        >>> a | b                              # letters in a or b or both
        {'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}
        >>> a & b                              # letters in both a and b
        {'a', 'c'}
        >>> a ^ b                              # letters in a or b but not both
        {'r', 'd', 'b', 'm', 'z', 'l'} 

Set Comprehension

    ex)
        >>> a = {x for x in 'abracadabra' if x not in 'abc'}
        >>> a
        {'r', 'd'}






