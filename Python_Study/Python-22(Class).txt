Private Variables
    Private instance variables that can be only accessed from inside of object not exist in python.

    However, Python code has some convention.
    A name prefixed with an underscore (e.g. _spam) should be treated as a non-public part of the API (whether it is a function, a method or a data member).
    It should be considered an implementation detail and subject to change without notice.

    Name mangling : at least two underscore __, help letting subclasses override methods without breaking intraclass method calls for avoiding accidents.
    Still able to access and mutable.

    ex)
        class Mapping:
            def __init__(self, iterable):
                self.items_list = []
                self.__update(iterable)

            def update(self, iterable):
                for item in iterable:
                    self.items_list.append(item)

            __update = update   # private copy of original update() method

        class MappingSubclass(Mapping):

            def update(self, keys, values):
                # provides new signature for update()
                # but does not break __init__()
                for item in zip(keys, values):
                    self.items_list.append(item)

    Code passed to exec() or eval() does not consider the classname of the invoking class to be the current class;
    Similar to the global statement, the effect of which is likewise restricted to code that is byte-compiled together.
    The same restriction applies to getattr(), setattr() and delattr(), as well as when referencing __dict__ directly.

Odds and Ends
    Data Type like record, or struct is useful to bundle together a few named data items.
    In Python, an empty class definition is worked like them.

    ex)
        class Employee:
            pass

        john = Employee()  # Create an empty employee record

        # Fill the fields of the record
        john.name = 'John Doe'
        john.dept = 'computer lab'
        john.salary = 1000

Iterators
    most container objects can be looped over using a for statement:
    ex)
        for element in [1, 2, 3]:
            print(element)
        for element in (1, 2, 3):
            print(element)
        for key in {'one':1, 'two':2}:
            print(key)
        for char in "123":
            print(char)
        for line in open("myfile.txt"):
            print(line, end='')

    for statement calls iter() on the container object.
    The function returns an iterator object that defines the method __next__() which accesses elements one at time.
    At the end, StopIteration exception is raised and terminate for loop.


    next() : calls __next__() methods
    ex)
        >>> s = 'abc'
        >>> it = iter(s)
        >>> it
        <iterator object at 0x00A1DB50>
        >>> next(it)
        'a'
        >>> next(it)
        'b'
        >>> next(it)
        'c'
        >>> next(it)
        Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
            next(it)
        StopIteration

    Define an __iter__() method which returns an object with a __next__() method. 
    If the class defines __next__(), then __iter__() can just return self:

    ex)
            """Iterator for looping over a sequence backwards."""
        class Reverse:
            def __init__(self, data):
                self.data = data
                self.index = len(data)

            def __iter__(self):
                return self

            def __next__(self):
                if self.index == 0:
                    raise StopIteration
                self.index = self.index - 1
                return self.data[self.index]
        >>>
        >>> rev = Reverse('spam')
        >>> iter(rev)
        <__main__.Reverse object at 0x00A1DB50>
        >>> for char in rev:
        ...     print(char)
        ...
        m
        a
        p
        s

Generators
     __iter__() and __next__() methods are created automatically : A simple and powerful tool for creating iterators.
    Use the yield statement whenever they want to return data.

    Each time next() is called on it, the generator resumes where it left off (it remembers all the data values and which statement was last executed).
    ex)
        def reverse(data):
            for index in range(len(data)-1, -1, -1):
                yield data[index]
        >>>
        >>> for char in reverse('golf'):
        ...     print(char)
        ...
        f
        l
        o
        g

    another feature : the local variables and execution state are automatically saved between calls
    Easier to write and much more clear like self.index and self.data.

    automatically raise StopIteration when generators terminate.

Generator Expressions
    simple generator code is similar to list comprehensions.
    Generator expressions are more compact but less versatile than full generator definitions and tend to be more memory friendly than equivalent list comprehensions.
    
    ex)
        >>> sum(i*i for i in range(10))                 # sum of squares
        285

        >>> xvec = [10, 20, 30]
        >>> yvec = [7, 5, 3]
        >>> sum(x*y for x,y in zip(xvec, yvec))         # dot product
        260

        >>> unique_words = set(word for line in page  for word in line.split())

        >>> valedictorian = max((student.gpa, student.name) for student in graduates)

        >>> data = 'golf'
        >>> list(data[i] for i in range(len(data)-1, -1, -1))
        ['f', 'l', 'o', 'g']



























