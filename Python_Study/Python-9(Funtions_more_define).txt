# Arbitrary Argument Lists
  Finally, the least frequently used option is to specify that a function can be called with an arbitrary number of arguments. 
  These arguments will be wrapped up in a tuple. 
  Before the variable number of arguments, zero or more normal arguments may occur.

    ex)
        def write_multiple_items(file, separator, *args):
            file.write(separator.join(args))

    * Normally, these variadic arguments will be last in the list of formal parameters
      b/c  they scoop up all remaining input arguments.

      *args parameter are ‘keyword-only’ arguments
    
    ex2)
    >>> def concat(*args, sep="/"):
    ...     return sep.join(args)
    ...
    >>> concat("earth", "mars", "venus")
    'earth/mars/venus'
    >>> concat("earth", "mars", "venus", sep=".")
    'earth.mars.venus'

# Unpacking Argument Lists
    The reverse situation occurs when the arguments are already in a list or tuple 
    but need to be unpacked for a function call requiring separate positional arguments. 

    ex)
        >>> list(range(3, 6))            # normal call with separate arguments
        [3, 4, 5]
        >>> args = [3, 6]
        >>> list(range(*args))            # call with arguments unpacked from a list
        [3, 4, 5]

    For instance, the built-in range() function expects separate start and stop arguments. 
    If they are not available separately, write the function call with the *-operator to unpack the arguments out of a list or tuple

    ex2)
    >>> def parrot(voltage, state='a stiff', action='voom'):
    ...     print("-- This parrot wouldn't", action, end=' ')
    ...     print("if you put", voltage, "volts through it.", end=' ')
    ...     print("E's", state, "!")
    ...
    >>> d = {"voltage": "four million", "state": "bleedin' demised", "action": "VOOM"}
    >>> parrot(**d)
    -- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !

    Tips : *arg : 여러개의 복수 인자를 함수로 받을 떄 사용 (*a, *d 등 아무거나 가능)
           **karg : 딕셔너리 형태로 키워드와 함께 함수 내부로 전달

# Lambda Expressions
    Small anonymous functions can be created with the lambda keyword.
    Lambda functions can be used wherever function objects are required.
    They are syntactically restricted to a single expression. 
    Semantically, they are just syntactic sugar for a normal function definition

    ex)
        >>> def make_incrementor(n):
        ...     return lambda x: x + n
        ...
        >>> f = make_incrementor(42)
        >>> f(0)
        42
        >>> f(1)
        43

    ex2) Another use is to pass a small function as an argument
    >>> pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
    >>> pairs.sort(key=lambda pair: pair[1])
    >>> pairs
    [(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]

# Documentation Strings
    The first line should always be a short, concise summary of the object’s purpose

    If there are more lines in the documentation string, 
    the second line should be blank, visually separating the summary from the rest of the description. 
    The following lines should be one or more paragraphs describing the object’s calling conventions, its side effects, etc.

    ex) 
        >>> def my_function():
        ...     """Do nothing, but document it.
        ...
        ...     No, really, it doesn't do anything.
        ...     """
        ...     pass
        ...
        >>> print(my_function.__doc__)
        Do nothing, but document it.

            No, really, it doesn't do anything.


# Function Annotations
    completely optional metadata information about the types used by user-defined functions
    Annotations are stored in the __annotations__ attribute of the function as a dictionary 
    and have no effect on any other part of the function

    Return annotations are defined by a literal ->, followed by an expression, between the parameter list and the colon denoting the end of the def statement

    ex)
        >>> def f(ham: str, eggs: str = 'eggs') -> str:
        ...     print("Annotations:", f.__annotations__)
        ...     print("Arguments:", ham, eggs)
        ...     return ham + ' and ' + eggs
        ...
        >>> f('spam')
        Annotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class 'str'>}
        Arguments: spam eggs
        'spam and eggs'

