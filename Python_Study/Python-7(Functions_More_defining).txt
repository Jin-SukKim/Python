More on Defining Functions :

    Argument Values :
    # also good to look if 'in' keyword
    def ask_ok(prompt, retries=4, reminder='Please try again!'):
    while True:
        ok = input(prompt)
        if ok in ('y', 'ye', 'yes'):
            return True
        if ok in ('n', 'no', 'nop', 'nope'):
            return False
        retries = retries - 1
        if retries < 0:
            raise ValueError('invalid user response')
        print(reminder)

    # this function can called in several ways

        - giving only the mandatory argument: ask_ok('Do you really want to quit?')

        - giving one of the optional arguments: ask_ok('OK to overwrite the file?', 2)

        - or even giving all arguments: ask_ok('OK to overwrite the file?', 2, 'Come on, only yes or no!')

    # Default values asre evaluated at the point of function definition in the defining scope
    i = 5

    def f(arg=i):
        print(arg)

    i = 6
    f()

    # default valus is evaluated only once
    def f(a, L=[]):
    L.append(a)
    return L

    print(f(1))
    [1]
    print(f(2))
    [1, 2]
    print(f(3))
    [1, 2, 3]

    # function can be called by using keyword argument of the form kwarg = values

    # only one argument voltage is required.
    # other arguments are optional
    def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):
    print("-- This parrot wouldn't", action, end=' ')
    print("if you put", voltage, "volts through it.")
    print("-- Lovely plumage, the", type)
    print("-- It's", state, "!")

    # valid calls
    parrot(1000)                                          # 1 positional argument
    parrot(voltage=1000)                                  # 1 keyword argument
    parrot(voltage=1000000, action='VOOOOOM')             # 2 keyword arguments
    parrot(action='VOOOOOM', voltage=1000000)             # 2 keyword arguments
    parrot('a million', 'bereft of life', 'jump')         # 3 positional arguments
    parrot('a thousand', state='pushing up the daisies')  # 1 positional, 1 keyword

    # invalid calls
    parrot()                     # required argument missing
    parrot(voltage=5.0, 'dead')  # non-keyword argument after a keyword argument
    parrot(110, voltage=220)     # duplicate value for the same argument
    parrot(actor='John Cleese')  # unknown keyword argument

    # **name receives any data type that is in a dictionary
    # *name  receives tuple containing the positional arguments
    # when **name like form is present, it receives a dictionary containing all keyword arguemtns except for thos corresponding to a formal parameter
    # if *name like parameter is also included, *name should come first than **name

    def cheeseshop(kind, *arguments, **keywords):
    print("-- Do you have any", kind, "?")
    print("-- I'm sorry, we're all out of", kind)
    for arg in arguments:
        print(arg)
    print("-" * 40)
    for kw in keywords:
        print(kw, ":", keywords[kw])

    or

    cheeseshop("Limburger", "It's very runny, sir.",
           "It's really very, VERY runny, sir.",
           shopkeeper="Michael Palin",
           client="John Cleese",
           sketch="Cheese Shop Sketch")

    # print
    # the order of printed keyword arguments
    # are matched with the order of arguments in the function calls 
    
    -- Do you have any Limburger ?
    -- I'm sorry, we're all out of Limburger
    It's very runny, sir.
    It's really very, VERY runny, sir.
    ----------------------------------------
    shopkeeper : Michael Palin
    client : John Cleese
    sketch : Cheese Shop Sketch
