Virtual Environment and Packages
    Sometimes applications need specific version of python, ver 1.0 or ver 2.0.
    If application A needs 1.0 and B needs 2.0, there are conflict and one app is not able to run.
    The solution is to create virtual environment.
        ex) app A has virtual environment 1.0 and B has 2.0 environment.
            Even if B needs version upgrade, no effect on A.

Creating Virtual Envrionment
    venv module : create and manage virtual environment.

    To create a virtual environment, decide upon a directory where you want to place it, and run the venv module as a script with the directory path.

    ex)
        # This will create the tutorial-env directory if it doesn’t exist, and also create directories inside it containing a copy of the Python interpreter, the standard library, and various supporting files.
        python3 -m venv tutorial-env

    common directory location : .venv
    This typically hidden in the shell.
    Preventing clash with .env variable definition fiiles that some tooling supports.

    Activate virtual environment.

    ex)
        Window :
            tutorial-env\Scripts\activate.bat
        
        Unix or MacOS :
            source tutorial-env/bin/activate

    Tip : This script is for bash shell. For csh, or fish shell, activate.csh, or activate.fish script is used.

    Activating Virtual Environment changes shell's prompt and environment.

    ex)
        $ source ~/envs/tutorial-env/bin/activate
        (tutorial-env) $ python
        Python 3.5.1 (default, May  6 2016, 10:59:36)
        ...
        >>> import sys
        >>> sys.path
        ['', '/usr/local/lib/python35.zip', ...,
        '~/envs/tutorial-env/lib/python3.5/site-packages']
        >>>

Managing Packages with pip
    pip program: install, upgrade, and remove packages
    By default pip will install packages from the Python Package Index, <https://pypi.org>.
    
    ex)
        (tutorial-env) $ pip search astronomy
        skyfield               - Elegant astronomy for Python
        gary                   - Galactic astronomy and gravitational dynamics.
        novas                  - The United States Naval Observatory NOVAS astronomy library
        astroobs               - Provides astronomy ephemeris to plan telescope observations
        PyAstronomy            - A collection of astronomy related tools for Python.
        ...

    pip has a number of subcommands: “search”, “install”, “uninstall”, “freeze”, etc.

    Downloading Packages

    ex)
        (tutorial-env) $ python -m pip install novas
        Collecting novas
        Downloading novas-3.1.1.3.tar.gz (136kB)
        Installing collected packages: novas
        Running setup.py install for novas
        Successfully installed novas-3.1.1.3

    Downloading specific version using ==

    ex)
        (tutorial-env) $ python -m pip install requests==2.6.0
        Collecting requests==2.6.0
        Using cached requests-2.6.0-py2.py3-none-any.whl
        Installing collected packages: requests
        Successfully installed requests-2.6.0

    re-run this command -> notive the verions is already installed and do nothing.
    Downloading different version or 
    pip install --upgrade : upgrade to latest version

    ex)
        (tutorial-env) $ python -m pip install --upgrade requests
        Collecting requests
        Installing collected packages: requests
        Found existing installation: requests 2.6.0
            Uninstalling requests-2.6.0:
            Successfully uninstalled requests-2.6.0
        Successfully installed requests-2.7.0

    pip uninstall : removing one or more package names from virtual environment

    pip show : display information about particular package

    ex)
        (tutorial-env) $ pip show requests
        ---
        Metadata-Version: 2.0
        Name: requests
        Version: 2.7.0
        Summary: Python HTTP for Humans.
        Home-page: http://python-requests.org
        Author: Kenneth Reitz
        Author-email: me@kennethreitz.com
        License: Apache 2.0
        Location: /Users/akuchling/envs/tutorial-env/lib/python3.4/site-packages
        Requires:

    pip list : display all of the packages installed in the virtual environment.

    ex)
        (tutorial-env) $ pip list
        novas (3.1.1.3)
        numpy (1.9.2)
        pip (7.0.3)
        requests (2.7.0)
        setuptools (16.0)

    pip freeze : produce similar list of the installed packages, but the output uses the format that pip install expects.
    common way : put list into requirements txt file.

    ex)
        (tutorial-env) $ pip freeze > requirements.txt
        (tutorial-env) $ cat requirements.txt
        novas==3.1.1.3
        numpy==1.9.2
        requests==2.7.0

    requirement.txt file can be committed to version control.

    install -r : install all necessary packages.

    ex)
        (tutorial-env) $ python -m pip install -r requirements.txt
        Collecting novas==3.1.1.3 (from -r requirements.txt (line 1))
        ...
        Collecting numpy==1.9.2 (from -r requirements.txt (line 2))
        ...
        Collecting requests==2.7.0 (from -r requirements.txt (line 3))
        ...
        Installing collected packages: novas, numpy, requests
        Running setup.py install for novas
        Successfully installed novas-3.1.1.3 numpy-1.9.2 requests-2.7.0 

    There are more options of pip.






















