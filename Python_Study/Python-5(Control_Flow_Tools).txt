if Statements :

    >>> x = int(input("Please enter an integer: "))
    Please enter an integer: 42
    >>> if x < 0:
    ...     x = 0
    ...     print('Negative changed to zero')
    ... elif x == 0:
    ...     print('Zero')
    ... elif x == 1:
    ...     print('Single')
    ... else:
    ...     print('More')
    ...
    More

    # elif = else if

for Statements :
    # in python, for loop is worked by iterates over the tiems of any sequence
    # in the order that they appear in the sequence
    >>> # Measure some strings:
    ... words = ['cat', 'window', 'defenestrate']
    >>> for w in words:
    ...     print(w, len(w))
    ...
    cat 3
    window 6
    defenestrate 12

    # code that modifies a colections while iterating over that same collections can ve tricky
    # It is usually more straigt-forward to loop over a copy of the collection or create a new one
    # Strategy:  Iterate over a copy
    for user, status in users.copy().items():
        if status == 'inactive':
            del users[user]

    # Strategy:  Create a new collection
    active_users = {}
    for user, status in users.items():
        if status == 'active':
            active_users[user] = status
            
The range() Function
    # using range to iterates by number sequence like other languages for loop
    >>> for i in range(5):
    ...     print(i)
    ...
    0
    1
    2
    3
    
    # range works like list but it is not
    # it calls iterable
    range(5, 10)
    5, 6, 7, 8, 9

    range(0, 10, 3)
    0, 3, 6, 9

    range(-10, -100, -30)
    -10, -40, -70    


break and continue Statements
    break : escape from loop statement like for, while
    >>> for n in range(2, 10):
    ...     for x in range(2, n):
    ...         if n % x == 0:
    ...             print(n, 'equals', x, '*', n//x)
    ...             break
    ...     else:
    ...         # loop fell through without finding a factor
    ...         print(n, 'is a prime number')
    ...
    2 is a prime number
    3 is a prime number
    4 equals 2 * 2
    5 is a prime number
    6 equals 2 * 3
    7 is a prime number
    8 equals 2 * 4
    9 equals 3 * 3

    continue : loop statement keep working
    >>> for num in range(2, 10):
    ...     if num % 2 == 0:
    ...         print("Found an even number", num)
    ...         continue
    ...     print("Found a number", num)
    Found an even number 2
    Found a number 3
    Found an even number 4
    Found a number 5
    Found an even number 6
    Found a number 7
    Found an even number 8
    Found a number 9

pass Statements :
    # pass does nothing
    # usually used when any statement is needed but program does nothing

    >>> while True:
    ...     pass  # Busy-wait for keyboard interrupt (Ctrl+C)
    ...

    # when creating minimal class
    >>> class MyEmptyClass:
    ...     pass
    ...

    # when writing new node at different places
    >>> def initlog(*args):
    ...     pass   # Remember to implement this!
    ...