Class Definition Syntax
    
    ex)
        class ClassName:
            <statement-1>
            .
            .
            .
            <statement-N>
    
Class object
    Class object supports attribute references and instantiation.

    Attribute reference : obj.name

    ex)
        class MyClass:
            """A simple example class"""
            i = 12345

            def f(self):
                return 'hello world'
    
        MyClass.i or MyClass.f
        __doc__ also attribute

    Class instantiation uses function notation.

    ex)
        x = MyClass()

    The instantiation operation (“calling” a class object) creates an empty object.
    initial state can be customized by using __init__()

    ex)
        def __init__(self):
            self.data = []


    class instantiation automatically invokes __init__() 
    
    ex)
        x = MyClass()

    ex2)
        >>> class Complex:
        ...     def __init__(self, realpart, imagpart):
        ...         self.r = realpart
        ...         self.i = imagpart
        ...
        >>> x = Complex(3.0, -4.5)
        >>> x.r, x.i
        (3.0, -4.5)

Instance objects
    Data attribute : instance variables (in C++, data member)
        Don't need to be declared.

    ex)
        x.counter = 1
        while x.counter < 10:
            x.counter = x.counter * 2
        print(x.counter)
        del x.counter

Method obejects
    
    ex) 
        x.f() # print hello
    
    It can be stored and called later.

    ex)
        xf = x.f
        while True:
            print(xf()) # print hello

Class and Instance Variables
    Class variable : attributes and methods shared by all instances of the class
    Instance Variable : data unique to each instance.

    ex)
        class Dog:

            kind = 'canine'         # class variable shared by all instances

            def __init__(self, name):
                self.name = name    # instance variable unique to each instance

        >>> d = Dog('Fido')
        >>> e = Dog('Buddy')
        >>> d.kind                  # shared by all dogs
        'canine'
        >>> e.kind                  # shared by all dogs
        'canine'
        >>> d.name                  # unique to d
        'Fido'
        >>> e.name                  # unique to e
        'Buddy'

    using list and dictionary 

        just a single list would be shared by all Dog instances.
    ex)
        class Dog:

            tricks = []             # mistaken use of a class variable

            def __init__(self, name):
                self.name = name

            def add_trick(self, trick):
                self.tricks.append(trick)

        >>> d = Dog('Fido')
        >>> e = Dog('Buddy')
        >>> d.add_trick('roll over')
        >>> e.add_trick('play dead')
        >>> d.tricks                # unexpectedly shared by all dogs
        ['roll over', 'play dead']

    correct design

    ex)
        class Dog:

            def __init__(self, name):
                self.name = name
                self.tricks = []    # creates a new empty list for each dog

            def add_trick(self, trick):
                self.tricks.append(trick)

        >>> d = Dog('Fido')
        >>> e = Dog('Buddy')
        >>> d.add_trick('roll over')
        >>> e.add_trick('play dead')
        >>> d.tricks
        ['roll over']
        >>> e.tricks
        ['play dead']
    


























