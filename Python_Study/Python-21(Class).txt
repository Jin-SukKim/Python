Random Remarks(기타 주의사항)
    If the same attribute name occurs in both an instance and in a class, then attribute lookup prioritizes the instance

    ex)
        >>> class Warehouse:
                purpose = 'storage'
                region = 'west'

        >>> w1 = Warehouse()
        >>> print(w1.purpose, w1.region)
        storage west
        >>> w2 = Warehouse()
        >>> w2.region = 'east'
        >>> print(w2.purpose, w2.region)
        storage east

    Often, the first argument of a method is called self.
    But it means nothing, just convention(관례)
    Python always pass value to the first instance, so self used
    ex)
        # Function defined outside the class
        def f1(self, x, y):
            return min(x, x+y)

        class C:
            f = f1

            def g(self):
                return 'hello world'

            h = g
    ex2)
        # Function defined outside the class
        def f1(self, x, y):
            return min(x, x+y)

        class C:
            f = f1

            def g(self):
                return 'hello world'

            h = g

    ex3)
        class Bag:
            def __init__(self):
                self.data = []

            def add(self, x):
                self.data.append(x)

            def addtwice(self, x):
                self.add(x)
                self.add(x)

    Each value is an object, and therefore has a class (also called its type). It is stored as object.__class__.

Inheritance
    BaseClassName must be defined in a scope containing the derived class definition.

    syntax:
        class DerivedClassName(BaseClassName):
            <statement-1>
            .
            .
            .
            <statement-N>

    base class is defined in another module
    ex)
        class DerivedClassName(modname.BaseClassName):

    Execution of derived class proceeds same as base class.
    When the class object is created, base class is remembered
    base class methods can be override.

    Python has two built-in functions that work with inheritance:
        - Use isinstance() to check an instance’s type: isinstance(obj, int) will be True only if obj.__class__ is int or some class derived from int.
        - Use issubclass() to check class inheritance: issubclass(bool, int) is True since bool is a subclass of int. However, issubclass(float, int) is False since float is not a subclass of int.

Multiple Inheritance
    Syntax:
        class DerivedClassName(Base1, Base2, Base3):
            <statement-1>
            .
            .
            .
            <statement-N>
    
    Basic search for attributes inherited from a parent class as depth-first, left-to-right, not searching twice in the same class where there is an overlap in the hierarchy.
    If an attribute is not found in DerivedClassName, it is searched for in Base1, then (recursively) in the base classes of Base1, and if it was not found there, it was searched for in Base2, and so on.

    By calling super() method, the order is changed dynamically.

    This approach is known in some other multiple-inheritance languages as call-next-method and is more powerful than the super call found in single-inheritance languages.






































