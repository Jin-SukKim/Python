Classes
    Class : data + functions
    Create new class = create a new type of object, allowing new instances of that type to be made.

Scopes and NameSpaces
    
    NameSpace : a mapping from names to objects.
        - Most them are implemented as dictionary
    
    ex)
        the set of built-in names (containing functions such as abs(), and built-in exception names); 
        the global names in a module; 
        and the local names in a function invocation.

    The set of attributes of an object also form a namespace.
     there is absolutely no relation between names in different namespaces.
        ㄴ two different modules may both define a function maximize without confusion — users of the modules must prefix it with the module name.

    Attributes : any names after dot (ex: z.real, real = attribute)

    ex)
        modname.funcname, modname = module object, funcname = attribute.

        In this case there happens to be a straightforward mapping between the module’s attributes and the global names defined in the module: they share the same namespace.

    Attributes are read-only or writable.

    ex)
        modname.the_answer = 42

        using del

        del modname.the_answer # deleting the_answer attribute.

    Namespace containing the built-in names is created when Python interpreter starts up, and never deleted.
    The global namespace for a module is created when the module definition is read in.
    normally, module namespaces also last until the interpreter quits.

    The statements executed by the top-level invocation of the interpreter, 
    either read from a script file or interactively, are considered part of a module called __main__, so they have their own global namespace. 
    (The built-in names actually also live in a module; this is called builtins.)

    The local namespace for a function is created when the function is called, and deleted when the function returns or raises an exception.

    Scope : a textual region of a Python program where a namespace is directly accessible.
        ㄴ an unqualified reference to a name attempts to find the name in the namespace.

    3 or 4 nested scopes whose namespaces are directly accessible.
        1) local names : the innermost scope, which is searched first.
        2) the scopes of any enclosing functions, which are searched starting with the nearest enclosing scope, contains non-local, but also non-global names
        3) the current module’s global names : next-to-last scope
        4) the namespace containing built-in names : outmost scope (searched last)

    Declaration
        global : all references and assignments go directly to the middle scope containing the module’s global names.
        nonlocal : rebind variables found outside of the innermost scope. if not declared nonlocal, those variables are read-only.
            (not declared nonlocal will simply creates a new local varaible in the innermost scope, leavingg same named outer variable unchanged).

        local scope : references the local names of the (textually) current function.
        Outside functions, the local scope references the same namespace as the global scope: the module’s namespace.

        Class definitions place another namespace in the local scope.

        The global statement can be used to indicate that particular variables live in the global scope and should be rebound there; 
        the nonlocal statement indicates that particular variables live in an enclosing scope and should be rebound there.
        
Scopes and Namespaces Example

    ex)
        def scope_test():
            def do_local():
                spam = "local spam"

            def do_nonlocal():
                nonlocal spam
                spam = "nonlocal spam"

            def do_global():
                global spam
                spam = "global spam"

            spam = "test spam"
            do_local()
            print("After local assignment:", spam)
            do_nonlocal()
            print("After nonlocal assignment:", spam)
            do_global()
            print("After global assignment:", spam)

        scope_test()
        print("In global scope:", spam)

        Output :
        
        After local assignment: test spam
        After nonlocal assignment: nonlocal spam
        After global assignment: nonlocal spam
        In global scope: global spam

    The nonlocal assignment changed scope_test’s binding of spam, and the global assignment changed the module-level binding.


    






























